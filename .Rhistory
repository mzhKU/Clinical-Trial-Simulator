library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child -mu)^2)
text(63,150,paste("mu=", mu))
text(63,140,paste("Imbalance =", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
library(UsingR)
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child -mu)^2)
text(63,150,paste("mu=", mu))
text(63,140,paste("Imbalance =", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
library(UsingR)
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child -mu)^2)
text(63,150,paste("mu=", mu))
text(63,140,paste("Imbalance =", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74))
library(knitr)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df){
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)), x=xvals, dist=factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g+geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df){
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)), x=xvals, dist=factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g+geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library(ggplot)
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df){
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)), x=xvals, dist=factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g+geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library(ggplot)
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df){
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)), x=xvals, dist=factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g+geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library("ggplot2", lib.loc="/Users/mzhKU_work/Library/R/3.0/library")
library(ggplot2)
manipulate
library(ggplot)
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df){
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)), x=xvals, dist=factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x=x, y=y))
g <- g+geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library("xkcd", lib.loc="/Users/mzhKU_work/Library/R/3.0/library")
xkcd
xkcdman
?xkcd
?xkcdman
xkcdman(aes(x=1, y=1, scale=1))
xkcdman(mapping=aes(x=1, y=1, scale=1))
mapping <- aes(x=x,
y=y,
scale=scale,
ratioxy=ratioxy,
angleofspine = angleofspine,
anglerighthumerus = anglerighthumerus,
anglelefthumerus = anglelefthumerus,
anglerightradius = anglerightradius,
angleleftradius = angleleftradius,
anglerightleg =  anglerightleg,
angleleftleg = angleleftleg,
angleofneck = angleofneck,
color = color )
mapping
dataman <- data.frame( x= c(-1,0,1), y=c(-10,0,10),
scale = c(10,7,5),
ratioxy = ratioxy,
angleofspine =  seq(- pi / 2, -pi/2 + pi/8, l=3) ,
anglerighthumerus = -pi/6,
anglelefthumerus = pi + pi/6,
anglerightradius = 0,
angleleftradius = runif(3,- pi/4, pi/4),
angleleftleg = 3*pi/2  + pi / 12 ,
anglerightleg = 3*pi/2  - pi / 12,
angleofneck = runif(3, min = 3 * pi / 2 - pi/10 , max = 3 * pi / 2 + pi/10),
color=c("A","B","C"))
datascaled <- data.frame(x=c(-3,3),y=c(-30,30))
p <- ggplot(data=datascaled, aes(x=x,y=y)) + geom_point()
xrange <- range(datascaled$x)
yrange <- range(datascaled$y)
ratioxy <- diff(xrange) / diff(yrange)
dataman <- data.frame( x= c(-1,0,1), y=c(-10,0,10),
scale = c(10,7,5),
ratioxy = ratioxy,
angleofspine =  seq(- pi / 2, -pi/2 + pi/8, l=3) ,
anglerighthumerus = -pi/6,
anglelefthumerus = pi + pi/6,
anglerightradius = 0,
angleleftradius = runif(3,- pi/4, pi/4),
angleleftleg = 3*pi/2  + pi / 12 ,
anglerightleg = 3*pi/2  - pi / 12,
angleofneck = runif(3, min = 3 * pi / 2 - pi/10 , max = 3 * pi / 2 + pi/10),
color=c("A","B","C"))
p + xkcdman(mapping,dataman)
data(sleep)
head(sleep)
?sleep
?t.test
t.test(extra ~ I(relevel(group, 2)), paired=T, data=sleep)
t.test(extra ~ I(relevel(group, 2)), paired=T, data=sleep)$conf
data(ChickWeight)
library(reshape2)
head(ChickWeight)
length(ChickWeight)
length(ChickWeight[,1])
widecw <- dcast(ChickWeight, Diet + Chick ~ Time, value.var="weight")
widecw
head(widecw)
getOption("rstudio.markdownToHTML")
version
?mtcars
ls()
x
barriers
?barriers
ls()
str(d)
m
m2
?abline
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
job         : HTML Movies
library(png)
install.packages("png")
library(png)
library(shiny)
quit()
subtitle    : Apply More Force
library(slidify)
options(rpubs.upload.method = "internal")
getwd()
setwd("courses//data_science//capstone")
getwd()
setwd("07_Report/")
setwd("SwiftXey/")
file.edit("~/.Rprofile")
file.edit("~/.Renviron")
file.edit("~/.Renviron")
getwd()
setwd("~")
getwd()
file.edit("~/.Renviron")
getwd()
source("./projects/011_Enzyme_Barrier_Clustering/scripts/003_execute.r")
source("./projects/011_Enzyme_Barrier_Clustering/scripts/003_execute.r")
source("./projects/011_Enzyme_Barrier_Clustering/scripts/003_execute.r")
ls()
dout
getwd()
source("./projects/011_Enzyme_Barrier_Clustering/scripts/003_execute.r")
dout
names(dout)[2:(length(names(dout))-1)]
names(dout)[2:(length(names(dout))-1)][c(1, 2, 12)]
paste(names(dout)[2:(length(names(dout))-1)][c(1, 2)], "...", names(dout)[2:(length(names(dout))-1)][c(12)], sep="")
ggplotly(p)
library(plotly)
ggplotly(p)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
shiny::runApp('projects/size')
shiny::runApp('projects/trialsim')
install.packages("RNMInstall")
install.packages("RUnit")
shiny::runApp('projects/trialsim')
library(RNMImport)
quit()
library(RNMImport)
library(RUnit)
RUnit
help("RUnit")
install.packages("RNMImport")
?install.packages
quit()
install.packages("RNMImport")
quit()
shiny::runApp('projects/trialsim')
